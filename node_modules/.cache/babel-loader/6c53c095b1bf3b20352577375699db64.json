{"ast":null,"code":"var _jsxFileName = \"/home/stina/Documents/job-homework/arvato/Tv-Show-Search-App/src/Components/Episodes/Episodes.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useStyles } from \"./style\";\nimport { useParams } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport _ from \"lodash\";\nimport notfound from \"../../assets/img/notfound.png\";\nimport { Card, CardActionArea, CardMedia, CardContent, Typography, Grid } from \"@material-ui/core\";\nexport default function Episodes() {\n  const classes = useStyles();\n  const {\n    id\n  } = useParams();\n  const [episodes, setEpisodes] = useState([]);\n  useEffect(() => {\n    fetch(`https://api.tvmaze.com/shows/${id}/episodes`).then(res => res.json()).then(data => setEpisodes(data)).catch(err => console.log(err));\n  }, [id]);\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  const seasons = episodes.map(episode => episode.season).filter(onlyUnique);\n\n  const getSeasons = () => {\n    let tempSeasons = [];\n\n    for (let i = 1; i < seasons.length; i++) {\n      const season = episodes.filter(res => res.season === i);\n      tempSeasons.push(season);\n    }\n\n    return tempSeasons;\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, getSeasons().map((res, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, \"Season: \", index + 1), /*#__PURE__*/React.createElement(Card, {\n    className: classes.broot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, res.map(it => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: _.uniqueId(\"id_\"),\n    xs: 12,\n    sm: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardActionArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CardMedia, {\n    className: classes.media,\n    image: it.image ? it.image.original : notfound,\n    title: \"Contemplative Reptile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }, it.name), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  }, \" Air Date: \", it.airdate), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(ReactMarkdown, {\n    source: it.summary,\n    escapeHtml: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  })))))))))));\n}","map":{"version":3,"sources":["/home/stina/Documents/job-homework/arvato/Tv-Show-Search-App/src/Components/Episodes/Episodes.tsx"],"names":["React","useState","useEffect","useStyles","useParams","ReactMarkdown","_","notfound","Card","CardActionArea","CardMedia","CardContent","Typography","Grid","Episodes","classes","id","episodes","setEpisodes","fetch","then","res","json","data","catch","err","console","log","onlyUnique","value","index","self","indexOf","seasons","map","episode","season","filter","getSeasons","tempSeasons","i","length","push","broot","it","uniqueId","media","image","original","name","airdate","summary"],"mappings":"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","sourcesContent":["import React, { ReactElement, useState, useEffect } from \"react\";\nimport { Episode } from \"../ShowInterface\";\nimport { useStyles } from \"./style\";\nimport { useParams } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport _ from \"lodash\";\nimport notfound from \"../../assets/img/notfound.png\";\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Typography,\n  Grid,\n} from \"@material-ui/core\";\n\nexport default function Episodes(): ReactElement {\n  const classes = useStyles();\n  const { id } = useParams();\n  const [episodes, setEpisodes] = useState<Episode[]>([]);\n\n  useEffect(() => {\n    fetch(`https://api.tvmaze.com/shows/${id}/episodes`)\n      .then((res) => res.json())\n      .then((data) => setEpisodes(data))\n      .catch((err) => console.log(err));\n  }, [id]);\n\n  function onlyUnique(value: any, index: any, self: any) {\n    return self.indexOf(value) === index;\n  }\n\n  const seasons = episodes.map((episode) => episode.season).filter(onlyUnique);\n\n  const getSeasons = () => {\n    let tempSeasons: any = [];\n\n    for (let i = 1; i < seasons.length; i++) {\n      const season = episodes.filter((res: Episode) => res.season === i);\n      tempSeasons.push(season);\n    }\n    return tempSeasons;\n  };\n\n  return (\n    <Grid>\n      {getSeasons().map((res: any, index: number) => (\n        <div key={`${index}`}>\n          <h2>Season: {index + 1}</h2>\n\n          <Card className={classes.broot}>\n            <Grid container spacing={4}>\n              {res.map((it: Episode) => (\n                <Grid item key={_.uniqueId(\"id_\")} xs={12} sm={6} md={4}>\n                  <CardActionArea>\n                    <CardMedia\n                      className={classes.media}\n                      image={it.image ? it.image.original : notfound}\n                      title=\"Contemplative Reptile\"\n                    />\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {it.name}\n                      </Typography>\n                      <Typography> Air Date: {it.airdate}</Typography>\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        <ReactMarkdown source={it.summary} escapeHtml={false} />\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>\n                </Grid>\n              ))}\n            </Grid>\n          </Card>\n        </div>\n      ))}\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}